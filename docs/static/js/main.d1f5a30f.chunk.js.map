{"version":3,"sources":["types.ts","lib/common.ts","components/SourceCodeView/index.tsx","components/TimeString/index.tsx","components/TraceStep/index.tsx","components/TraceDumpSteps/index.tsx","components/TracePacketPart/index.tsx","components/TracePacket/index.tsx","components/TraceDumpViewer/index.tsx","components/TraceDumpSelector/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TTraceStepType","scrollTo","ref","scrollIntoView","behavior","block","inline","getSourceCodeLine","traceDump","file","lineNum","sourceLines","sourceName","fileId","files","find","fId","fileName","bytecode_name","fileIndexToSourceName","trim","getDataSize","step","d","length","SourceCodeView","props","stepIndex","trace","fileLines","main","lines","map","line","index","viewLine","c","undefined","className","TimeString","value","time","Date","toLocaleString","hour","minute","second","ms","Number","toFixed","split","TraceStep","body","vars","packetStep","setStepIndex","variables","getVarName","v","varId","t","Line","NewData","size","slice","tm","Offset","l","o","Error","m","onClick","stepClick","TraceDumpSteps","showAllSteps","console","log","steps","forEach","push","TracePacketPart","packet","showStep","prevPacketIndex","fromIndex","findLastIndex","nextPacketIndex","findIndex","TracePacket","packetIndex","setPacketIndex","first","setTimeout","packetParts","i","prev","next","TraceDumpViewer","traceFile","useState","setShowAllSteps","setStep","_","saveTextFile","text","suffix","a","document","createElement","download","name","href","URL","createObjectURL","Blob","type","click","prevStep","nextStep","onChange","e","target","checked","csv","row","toString","hex","csvText","Parser","header","eol","delimiter","parse","maxSize","j","jstep","spaces","repeat","join","TraceDumpSelector","fileReader","FileReader","readAsText","setTraceFile","onload","result","fileJson","JSON","source","Object","keys","key","setTraceDump","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1f5a30f.chunk.js","sourcesContent":["export interface TTraceFile {\n\tname: string;\t\t\t\t\t\t\t\t// trace dump file name\n\tsize: number;\t\t\t\t\t\t\t\t// trace dump file size\n}\n\nexport enum TTraceStepType {\n\tLine = 'l',\t\t\t\t\t\t\t\t\t// new line of source code\n\tNewData = 'n',\t\t\t\t\t\t\t\t// new input data received\n\tOffset = 'o',\t\t\t\t\t\t\t\t// parsed part of the input data\n\tError = 'e',\t\t\t\t\t\t\t\t// error occured\n}\n\nexport type TCodeLocation =\n\t[number, number, number];\t\t\t\t\t// file, line, column\n\nexport type TVariableUnset = number;\n\nexport type TVariableSet =\n\t[number, number, string];\t\t\t\t\t// variable id, variable type, variable value\n\nexport type TVariableAction = TVariableUnset | TVariableSet;\n\nexport interface TTraceStepBase {\n\tc: TCodeLocation;\t\t\t\t\t\t\t// source code location\n}\n\nexport interface TTraceStepLine extends TTraceStepBase {\n\tt: TTraceStepType.Line;\t\t\t\t\t\t// step type\n\tv: TVariableAction[];\t\t\t\t\t\t// list of changed variables\n}\n\nexport interface TTraceStepNewData extends TTraceStepBase {\n\tt: TTraceStepType.NewData;\t\t\t\t\t// step type\n\ttm: number;\t\t\t\t\t\t\t\t\t// timestamp\n\td: string;\t\t\t\t\t\t\t\t\t// hex string of the incoming data\n\to: number;\t\t\t\t\t\t\t\t\t// offset, 0 usually\n\n\t// getSize(): number;\n}\n\n// export class CTraceStepNewData implements TTraceStepNewData {\n// \tgetSize = () => {\n// \t\treturn 0;\n// \t}\n// }\n\nexport const getDataSize = (step: TTraceStepNewData) => step.d.length / 2;\n\nexport interface TTraceStepOffset extends TTraceStepBase {\n\tt: TTraceStepType.Offset;\t\t\t\t\t// step type\n\to: number;\t\t\t\t\t\t\t\t\t// offset\n\tl: number;\t\t\t\t\t\t\t\t\t// last (previous) offset\n}\n\nexport interface TTraceStepError extends TTraceStepBase {\n\tt: TTraceStepType.Error;\t\t\t\t\t\t// step type\n\to: number;\t\t\t\t\t\t\t\t\t// offset\n\tm: string;\t\t\t\t\t\t\t\t\t// error message\n}\n\nexport type TTraceStep = TTraceStepLine | TTraceStepNewData | TTraceStepOffset | TTraceStepError;\n\nexport type TCodeFileId = [number, string];\t\t// file id, file name\n\nexport type TVariableId = [number, string];\t\t// variable id, variable name\n\nexport interface TSourceCode {\n\tmain: string;\n\t[key: string]: string;\n}\n\nexport interface TSourceCodeLines {\n\t[key: string]: string[];\n}\n\nexport interface TTraceDump {\n\tbytecode_name: string;\n\tfiles: TCodeFileId[];\n\tvariables: TVariableId[];\n\ttrace: TTraceStep[];\n\tsource?: TSourceCode;\n\tsourceLines?: TSourceCodeLines;\n}\n","import { TTraceDump } from '../types';\n\nexport const scrollTo = (ref: any) => {\n\tif (ref)\n\t\tref.scrollIntoView({ behavior: 'auto', block: 'center', inline: 'center' });\n};\n\nconst fileIndexToSourceName = (traceDump: TTraceDump, file: number): string | null => {\n\tconst fileId = traceDump.files.find((fId) => fId[0] === file);\n\tif (!fileId)\n\t\treturn null;\n\tconst fileName = fileId[1];\n\tif (fileName === traceDump.bytecode_name)\n\t\treturn 'main';\n\treturn fileName;\n};\n\nexport const getSourceCodeLine = (traceDump: TTraceDump, file: number, lineNum: number) => {\n\tif (!traceDump.sourceLines)\n\t\treturn '?';\n\tconst sourceName = fileIndexToSourceName(traceDump, file);\n\tif (!sourceName)\n\t\treturn '?';\n\tconst lines = traceDump.sourceLines[sourceName];\n\tconst line = lines[lineNum - 1];\n\treturn line.trim();\n};\n","import React from 'react';\nimport { scrollTo } from '../../lib/common';\nimport { TTraceDump } from '../../types';\nimport './style.css';\n\ninterface SourceCodeViewProps {\n\ttraceDump: TTraceDump;\n\tstepIndex: number;\n}\n\nconst SourceCodeView: React.FC<SourceCodeViewProps> = (props) => {\n\tconst { traceDump, stepIndex } = props;\n\tconst step = traceDump.trace[stepIndex];\n\tconst fileLines = traceDump.sourceLines?.main; // NOTE: hardcoded \"main\" source code file\n\n\tif (!fileLines)\n\t\treturn <div>no source code available</div>;\n\n\tconst lines = fileLines.map((line, index) => {\n\t\tlet viewLine;\n\t\tif (line === '')\n\t\t\tviewLine = <br />;\n\t\telse\n\t\t\tviewLine = line;\n\n\t\treturn <pre\n\t\t\tkey={index}\n\t\t\tref={index === (step.c[1] - 1) ? scrollTo : undefined}\n\t\t\tclassName={index === (step.c[1] - 1) ? 'source-code-line source-code-line-selected': 'source-code-line'}>{viewLine}</pre>;\n\t});\n\n\treturn <div className=\"source-code-lines\">\n\t\t{lines}\n\t</div>;\n};\n\nexport default SourceCodeView;\n","import React from 'react';\n\ninterface TimeStringProps {\n\t/** unix timestamp */\n\tvalue: number;\n}\n\nconst TimeString: React.FC<TimeStringProps> = (props) => {\n\tconst { value } = props;\n\tconst d = new Date(value * 1000);\n\tconst time = d.toLocaleString('en-GB', {\n\t\thour: 'numeric',\n\t\tminute: 'numeric',\n\t\tsecond: 'numeric',\n\t});\n\tconst ms = Number(value).toFixed(6).split('.')[1];\n\treturn <span>{time}.{ms}</span>;\n};\n\nexport default TimeString;\n","import React from 'react';\nimport { getDataSize, TTraceDump, TTraceStep, TTraceStepNewData, TTraceStepType, TVariableAction } from '../../types';\nimport TimeString from '../TimeString';\nimport { getSourceCodeLine, scrollTo } from '../../lib/common';\nimport './style.css';\n\ninterface TraceStepProps {\n\ttraceDump: TTraceDump;\n\tstepIndex: number;\n\tindex: number;\n\tpacketStep?: TTraceStepNewData;\n\tsetStepIndex: (index: number) => void;\n\tstep: TTraceStep;\n}\n\nconst TraceStep: React.FC<TraceStepProps> = (props) => {\n\tconst { traceDump, stepIndex, index, packetStep, setStepIndex, step } = props;\n\tconst { variables } = traceDump;\n\n\tconst getVarName = (index: number) => {\n\t\tconst v = variables.find((varId) => varId[0] === index);\n\t\treturn v ? v[1] : '?';\n\t};\n\n\tconst listVars = (vars: TVariableAction[]) => {\n\t\treturn vars.map((v, index) => {\n\t\t\tif (typeof v === 'number')\n\t\t\t\treturn <span key={index} className=\"trace-var\">UNSET ${getVarName(v)}</span>;\n\t\t\telse\n\t\t\t\treturn <span key={index} className=\"trace-var\">${getVarName(v[0])} = {v[2]}</span>;\n\t\t});\n\t};\n\n\tconst stepClick = (index: number) => {\n\t\tsetStepIndex(index);\n\t};\n\n\tlet body;\n\n\tswitch (step.t) {\n\tcase TTraceStepType.Line:\n\t\tbody = <div>\n\t\t\t<div>\n\t\t\t\t{listVars(step.v)}\n\t\t\t</div>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\tcase TTraceStepType.NewData: {\n\t\tconst size = getDataSize(step);\n\t\tbody = <div>\n\t\t\t<div className=\"trace-step-data\">\n\t\t\t\t<div className=\"trace-step-data-column\">\n\t\t\t\t\t<strong>{size > 20 ? step.d.slice(0, 40) + '...' : step.d}</strong>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"trace-step-data-column\">\n\t\t\t\t\t<small>{size} bytes,&nbsp;<TimeString value={step.tm} /></small>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\t}\n\tcase TTraceStepType.Offset:\n\t\tbody = <div>\n\t\t\t<div className=\"trace-step-data\">\n\t\t\t\t<div className=\"trace-step-data-column\">\n\t\t\t\t\t<strong>{packetStep && <span>&nbsp;&nbsp;{ packetStep.d.slice(step.l * 2, step.o * 2) }</span>}</strong>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"trace-step-data-column\">\n\t\t\t\t\t<small>{step.o - step.l} bytes: {step.l}...{step.o}</small>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\tcase TTraceStepType.Error:\n\t\tbody = <div>\n\t\t\tError:\n\t\t\t<pre className=\"trace-step-error\">{step.m}</pre>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tkey={index}\n\t\t\tref={index === stepIndex ? scrollTo : undefined}\n\t\t\tclassName={index === stepIndex ? 'trace-step trace-step-selected' : 'trace-step'}\n\t\t\tonClick={() => stepClick(index)}>\n\t\t\t{body}\n\t\t</div>\n\t);\n};\n\nexport default TraceStep;\n","import React from 'react';\nimport { TTraceDump, TTraceStep, TTraceStepNewData, TTraceStepType } from '../../types';\nimport TraceStep from '../TraceStep';\nimport './style.css';\n\ninterface TraceDumpStepsProps {\n\ttraceDump: TTraceDump;\n\tstepIndex: number;\n\tsetStepIndex: (index: number) => void;\n\tshowAllSteps: boolean;\n}\n\nconst TraceDumpSteps: React.FC<TraceDumpStepsProps> = (props) => {\n\tconst { trace } = props.traceDump;\n\tconst { stepIndex, setStepIndex, showAllSteps } = props;\n\n\tconst step = trace[stepIndex] as TTraceStep;\n\tconsole.log('step', step);\n\n\tlet packetStep: TTraceStepNewData;\n\n\tconst steps: React.ReactElement[] = [];\n\ttrace.forEach((step, index) => {\n\t\tif (step.t === TTraceStepType.NewData)\n\t\t\tpacketStep = step;\n\t\tif (showAllSteps || (step.t !== TTraceStepType.Line))\n\t\t\tsteps.push(<TraceStep key={index} traceDump={props.traceDump} stepIndex={stepIndex} index={index} packetStep={packetStep} setStepIndex={setStepIndex} step={step} />);\n\t});\n\n\treturn (\n\t\t<div className=\"trace-dump-steps\">\n\t\t\t{steps}\n\t\t</div>\n\t);\n};\n\nexport default TraceDumpSteps;\n","import React from 'react';\nimport { TTraceStepNewData, TTraceStepOffset } from '../../types';\nimport { scrollTo } from '../../lib/common';\nimport './style.css';\n\ninterface TracePacketPartProps {\n\tpacket: TTraceStepNewData;\n\tstep: TTraceStepOffset;\n\tindex: number;\n\tstepIndex: number;\n\tsetStepIndex: (index: number) => void;\n}\n\nconst TracePacketPart: React.FC<TracePacketPartProps> = (props) => {\n\tconst { packet, step, index, stepIndex, setStepIndex } = props;\n\n\tconst showStep = (index: number) => {\n\t\tsetStepIndex(index);\n\t};\n\n\treturn (\n\t\t<span\n\t\t\tref={index === stepIndex ? scrollTo : undefined}\n\t\t\tclassName={index === stepIndex ? 'trace-packet-part trace-packet-part-selected' : 'trace-packet-part'}\n\t\t\tonClick={() => showStep(index)}>\n\t\t\t{packet.d.slice(step.l * 2, step.o * 2)}\n\t\t</span>\n\t);\n};\n\nexport default TracePacketPart;\n","import { findIndex, findLastIndex } from 'lodash';\nimport React from 'react';\nimport { getDataSize, TTraceDump, TTraceStep, TTraceStepNewData, TTraceStepType } from '../../types';\nimport TimeString from '../TimeString';\nimport TracePacketPart from '../TracePacketPart';\nimport './style.css';\n\ninterface TracePacketProps {\n\ttraceDump: TTraceDump;\n\tpacketIndex: number;\n\tsetPacketIndex: (index: number) => void;\n\tstepIndex: number;\n\tsetStepIndex: (index: number) => void;\n}\n\nconst prevPacketIndex = (trace: TTraceStep[], fromIndex: number) => findLastIndex(trace, (step) => step.t === TTraceStepType.NewData, fromIndex - 1);\n\nconst nextPacketIndex = (trace: TTraceStep[], fromIndex: number) => findIndex(trace, (step) => step.t === TTraceStepType.NewData, fromIndex + 1);\n\nconst TracePacket: React.FC<TracePacketProps> = (props) => {\n\tconst { trace } = props.traceDump;\n\tconst { packetIndex, setPacketIndex, stepIndex, setStepIndex } = props;\n\n\tconst packet = trace[packetIndex] as TTraceStepNewData;\n\n\tif (!packet) {\n\t\t// searching first available packet\n\t\tconst first = nextPacketIndex(trace, -1);\n\t\tif (first === -1) {\n\t\t\treturn <div>No data packets available in the trace file</div>;\n\t\t}\n\n\t\tsetTimeout(() => setPacketIndex(first));\n\t\treturn null;\n\t}\n\n\tconst goPrevPacket = () => {\n\t\tlet prev = prevPacketIndex(trace, packetIndex);\n\t\tif (prev === -1)\n\t\t\tprev = prevPacketIndex(trace, trace.length);\n\t\tsetPacketIndex(prev);\n\t};\n\n\tconst goNextPacket = () => {\n\t\tlet next = nextPacketIndex(trace, packetIndex);\n\t\tif (next === -1)\n\t\t\tnext = nextPacketIndex(trace, -1);\n\t\tsetPacketIndex(next);\n\t};\n\n\tconst packetParts: React.ReactElement[] = [];\n\t// collect packet parts from the trace steps until the next packet occurs\n\tlet i = packetIndex + 1;\n\tlet step = trace[i];\n\twhile (step && step.t !== TTraceStepType.NewData) {\n\t\tif (step.t === TTraceStepType.Offset)\n\t\t\tpacketParts.push(<TracePacketPart key={i} packet={packet} step={step} index={i} stepIndex={stepIndex} setStepIndex={setStepIndex} />);\n\t\ti += 1;\n\t\tstep = trace[i];\n\t}\n\n\treturn (\n\t\t<div className=\"trace-packet\">\n\t\t\t<div className=\"trace-packet-info\">\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<button onClick={goPrevPacket}>&lt;</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<button onClick={goNextPacket}>&gt;</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex trace-packet-pad\">\n\t\t\t\t\tTime:&nbsp;<TimeString value={packet.tm} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex trace-packet-pad\">\n\t\t\t\t\tSize: {getDataSize(packet)} B\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"flex trace-packet-hex\">\n\t\t\t\t{packetParts}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TracePacket;\n","import _ from 'lodash';\nimport React, { ChangeEvent, useState } from 'react';\nimport { Parser } from 'json2csv';\nimport { getSourceCodeLine } from '../../lib/common';\nimport { getDataSize, TTraceDump, TTraceFile, TTraceStepNewData, TTraceStepType } from '../../types';\nimport SourceCodeView from '../SourceCodeView';\nimport TraceDumpSteps from '../TraceDumpSteps';\nimport TracePacket from '../TracePacket';\nimport './style.css';\n\ninterface TraceDumpViewerProps {\n\ttraceFile: TTraceFile;\n\ttraceDump: TTraceDump;\n}\n\nconst TraceDumpViewer: React.FC<TraceDumpViewerProps> = (props) => {\n\tconst { traceFile, traceDump } = props;\n\tconst [packetIndex, setPacketIndex] = useState(-1);\n\tconst [stepIndex, setStepIndex] = useState(0);\n\tconst [showAllSteps, setShowAllSteps] = useState(false);\n\n\tconst setPacket = (index: number) => {\n\t\tsetPacketIndex(index);\n\t\tsetStepIndex(index);\n\t};\n\n\tconst setStep = (index: number) => {\n\t\tif (index < 0)\n\t\t\tindex = traceDump.trace.length - 1;\n\t\telse if (index >= traceDump.trace.length)\n\t\t\tindex = 0;\n\t\tsetStepIndex(index);\n\t\t// find a packet index to the left of the selected step index\n\t\tconst packetIndex = _.findLastIndex(traceDump.trace, (step) => step.t === TTraceStepType.NewData, index);\n\t\tif (packetIndex !== -1)\n\t\t\tsetPacketIndex(packetIndex);\n\t};\n\n\tconst showAllStepsChanged = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetShowAllSteps(e.target.checked);\n\t};\n\n\tconst prevStep = (index: number) => {\n\t\tif (showAllSteps)\n\t\t\treturn index - 1;\n\t\telse {\n\t\t\tlet prev = _.findLastIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, index - 1);\n\t\t\tif (prev === -1)\n\t\t\t\tprev = _.findLastIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, traceDump.trace.length - 1);\n\t\t\treturn prev;\n\t\t}\n\t};\n\n\tconst nextStep = (index: number) => {\n\t\tif (showAllSteps)\n\t\t\treturn index + 1;\n\t\telse {\n\t\t\tlet next = _.findIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, index + 1);\n\t\t\tif (next === -1)\n\t\t\t\tnext = _.findIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, 0);\n\t\t\treturn next;\n\t\t}\n\t};\n\n\tconst saveTextFile = (text: string, suffix: string) => {\n\t\tconst a = document.createElement('a');\n\t\ta.download = traceFile.name + suffix;\n\t\ta.href = URL.createObjectURL(new Blob([text], {type: 'text/plain'}));\n\t\ta.click();\n\t};\n\n\tconst doExportCSV = () => {\n\t\tconst csv = [\n\t\t\t['type', 'size', 'hex', 'code'],\n\t\t];\n\t\tlet packet: TTraceStepNewData;\n\t\ttraceDump.trace.forEach((step) => {\n\t\t\tif (step.t === TTraceStepType.Line)\n\t\t\t\treturn;\n\n\t\t\t// type\n\t\t\tconst row: Array<string> = [step.t];\n\n\t\t\t// size, hex\n\t\t\tif (step.t === TTraceStepType.NewData) {\n\t\t\t\tpacket = step;\n\t\t\t\trow.push(getDataSize(step).toString());\n\t\t\t\trow.push(step.d);\n\t\t\t} else if (step.t === TTraceStepType.Offset) {\n\t\t\t\tconst hex = packet.d.slice(step.l * 2, step.o * 2);\n\t\t\t\trow.push((step.o - step.l).toString());\n\t\t\t\trow.push(hex);\n\t\t\t} else if (step.t === TTraceStepType.Error) {\n\t\t\t\t// size='', hex=<error>\n\t\t\t\trow.push('');\n\t\t\t\trow.push(step.m);\n\t\t\t}\n\n\t\t\t// code\n\t\t\trow.push(getSourceCodeLine(traceDump, step.c[0], step.c[1]));\n\n\t\t\tcsv.push(row);\n\t\t});\n\n\t\t// convert to CSV text\n\t\tconst csvText = new Parser({ header: false, eol: '\\n', delimiter: ';' }).parse(csv);\n\n\t\t// and save file in the browser\n\t\tsaveTextFile(csvText, '.export.csv');\n\t};\n\n\tconst doExportTXT = () => {\n\t\tconst lines = [];\n\n\t\tlet packet: TTraceStepNewData | null = null;\n\t\tlet maxSize = 0;\n\t\tfor (let i = 0; i < traceDump.trace.length; i++) {\n\t\t\tconst step = traceDump.trace[i];\n\t\t\tif (step.t === TTraceStepType.NewData) {\n\t\t\t\tpacket = step;\n\t\t\t\tmaxSize = 0;\n\n\t\t\t\tif (lines.length > 0)\n\t\t\t\t\tlines.push('');\n\t\t\t\tlines.push(`New packet of ${getDataSize(step)} bytes:`);\n\t\t\t\tlines.push(`\\t${step.d}`);\n\t\t\t\tlines.push('');\n\n\t\t\t\tfor (let j = i + 1; j < traceDump.trace.length; j++) {\n\t\t\t\t\tconst jstep = traceDump.trace[j];\n\t\t\t\t\tif (jstep.t === TTraceStepType.Offset) {\n\t\t\t\t\t\tconst size = (jstep.o - jstep.l) * 2;\n\t\t\t\t\t\tif (size > maxSize)\n\t\t\t\t\t\t\tmaxSize = size;\n\t\t\t\t\t} else if (jstep.t === TTraceStepType.NewData)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (step.t === TTraceStepType.Offset) {\n\t\t\t\tif (packet) {\n\t\t\t\t\tconst hex = packet.d.slice(step.l * 2, step.o * 2);\n\t\t\t\t\tconst spaces = maxSize - hex.length;\n\t\t\t\t\tlines.push(`${hex}${' '.repeat(spaces)}\\t\\t${getSourceCodeLine(traceDump, step.c[0], step.c[1])}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsaveTextFile(lines.join('\\n'), '.export.txt');\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"trace-file-info\">\n\t\t\t\tLoaded trace dump file <strong>{traceFile.name}</strong> of size <strong>{Number(traceFile.size / 1024).toFixed(2)}</strong> KiB\n\t\t\t</div>\n\t\t\t<TracePacket traceDump={traceDump} packetIndex={packetIndex} setPacketIndex={setPacket} stepIndex={stepIndex} setStepIndex={setStep} />\n\t\t\t<div className=\"trace-view-settings\">\n\t\t\t\t<button onClick={() => setStep(prevStep(stepIndex))}>&lt;</button>\n\t\t\t\t<button onClick={() => setStep(nextStep(stepIndex))}>&gt;</button>\n\t\t\t\t&nbsp;\n\t\t\t\t<label>show all steps: <input type=\"checkbox\" onChange={showAllStepsChanged} /></label>\n\t\t\t\t&nbsp;\n\t\t\t\t<button onClick={doExportCSV}>Export to CSV</button>\n\t\t\t\t&nbsp;\n\t\t\t\t<button onClick={doExportTXT}>Export to TXT</button>\n\t\t\t</div>\n\t\t\t<div className=\"trace-dump-details\">\n\t\t\t\t<TraceDumpSteps traceDump={traceDump} stepIndex={stepIndex} setStepIndex={setStep} showAllSteps={showAllSteps} />\n\t\t\t\t<SourceCodeView traceDump={traceDump} stepIndex={stepIndex} />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default TraceDumpViewer;\n","import React, { ChangeEvent } from 'react';\nimport { TTraceDump, TTraceFile } from '../../types';\nimport './style.css';\n\ninterface TraceDumpSelectorProps {\n\tsetTraceFile: (file: TTraceFile) => void;\n\tsetTraceDump: (dump: TTraceDump) => void;\n}\n\nconst TraceDumpSelector: React.FC<TraceDumpSelectorProps> = (props) => {\n\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tif (e.target.files) {\n\t\t\tconst fileReader = new FileReader();\n\t\t\tconst file = e.target.files[0];\n\t\t\tfileReader.readAsText(file, 'UTF-8');\n\t\t\tprops.setTraceFile({ name: file.name, size: file.size });\n\t\t\tfileReader.onload = (e) => {\n\t\t\t\tif (e.target?.result) {\n\t\t\t\t\tconst fileJson = e.target.result.toString();\n\t\t\t\t\tconst traceDump: TTraceDump = JSON.parse(fileJson);\n\t\t\t\t\tif (traceDump.source) {\n\t\t\t\t\t\ttraceDump.sourceLines = {};\n\t\t\t\t\t\tfor (let key of Object.keys(traceDump.source)) {\n\t\t\t\t\t\t\tconst lines = traceDump.source[key].split('\\n');\n\t\t\t\t\t\t\ttraceDump.sourceLines[key] = lines;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprops.setTraceDump(traceDump);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\treturn (\n\t\t<header className=\"trace-dump-header\">\n\t\t\tLoad trace dump:\n\t\t\t<input type=\"file\" onChange={handleChange}/>\n\t\t</header>\n\t);\n};\n\nexport default TraceDumpSelector;\n","import { useState } from 'react';\nimport { TTraceDump, TTraceFile } from './types';\nimport TraceDumpViewer from './components/TraceDumpViewer';\nimport TraceDumpSelector from './components/TraceDumpSelector';\nimport './App.css';\n\nfunction App() {\n\tconst [traceFile, setTraceFile] = useState<TTraceFile>();\n\tconst [traceDump, setTraceDump] = useState<TTraceDump>();\n\n\tconsole.log('traceFile, traceDump', traceFile, traceDump);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{ (traceDump && traceFile) ? (\n\t\t\t\t<TraceDumpViewer traceFile={traceFile} traceDump={traceDump} />\n\t\t\t) : (\n\t\t\t\t<TraceDumpSelector setTraceFile={setTraceFile} setTraceDump={setTraceDump} />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}