{"version":3,"sources":["types.ts","lib/common.tsx","components/SourceCodeView/index.tsx","components/TimeString/index.tsx","components/TraceStep/index.tsx","components/TraceDumpSteps/index.tsx","components/TracePacketPart/index.tsx","components/TracePacket/index.tsx","components/TraceDumpViewer/index.tsx","components/TraceDumpSelector/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TTraceStepType","scrollTo","ref","scrollIntoView","behavior","block","inline","getSourceCodeLine","traceDump","file","lineNum","sourceLines","sourceName","fileId","files","find","fId","fileName","bytecode_name","fileIndexToSourceName","trim","renderDecodedHex","hex","bytes","i","length","hexByte","slice","push","Number","parseInt","map","byte","className","char","toString","toUpperCase","String","fromCharCode","getDataSize","step","d","SourceCodeView","props","stepIndex","trace","fileLines","main","lines","line","index","viewLine","c","undefined","TimeString","value","time","Date","toLocaleString","hour","minute","second","ms","toFixed","split","TraceStep","body","vars","packetStep","setStepIndex","decodeHex","variables","getVarName","v","varId","t","Line","NewData","size","tm","Offset","l","o","Error","m","onClick","stepClick","TraceDumpSteps","showAllSteps","console","log","steps","forEach","TracePacketPart","packet","showStep","prevPacketIndex","fromIndex","findLastIndex","nextPacketIndex","findIndex","TracePacket","packetIndex","setPacketIndex","first","setTimeout","packetParts","prev","next","TraceDumpViewer","traceFile","useState","setShowAllSteps","setDecodeHex","setStep","_","saveTextFile","text","suffix","a","document","createElement","download","name","href","URL","createObjectURL","Blob","type","click","prevStep","nextStep","onChange","e","target","checked","csv","row","csvText","Parser","header","eol","delimiter","parse","maxSize","j","jstep","spaces","repeat","join","TraceDumpSelector","fileReader","FileReader","readAsText","setTraceFile","onload","result","fileJson","JSON","source","Object","keys","key","setTraceDump","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c7ba6881.chunk.js","sourcesContent":["export interface TTraceFile {\n\tname: string;\t\t\t\t\t\t\t\t// trace dump file name\n\tsize: number;\t\t\t\t\t\t\t\t// trace dump file size\n}\n\nexport enum TTraceStepType {\n\tLine = 'l',\t\t\t\t\t\t\t\t\t// new line of source code\n\tNewData = 'n',\t\t\t\t\t\t\t\t// new input data received\n\tOffset = 'o',\t\t\t\t\t\t\t\t// parsed part of the input data\n\tError = 'e',\t\t\t\t\t\t\t\t// error occured\n}\n\nexport type TCodeLocation =\n\t[number, number, number];\t\t\t\t\t// file, line, column\n\nexport type TVariableUnset = number;\n\nexport type TVariableSet =\n\t[number, number, string];\t\t\t\t\t// variable id, variable type, variable value\n\nexport type TVariableAction = TVariableUnset | TVariableSet;\n\nexport interface TTraceStepBase {\n\tc: TCodeLocation;\t\t\t\t\t\t\t// source code location\n}\n\nexport interface TTraceStepLine extends TTraceStepBase {\n\tt: TTraceStepType.Line;\t\t\t\t\t\t// step type\n\tv: TVariableAction[];\t\t\t\t\t\t// list of changed variables\n}\n\nexport interface TTraceStepNewData extends TTraceStepBase {\n\tt: TTraceStepType.NewData;\t\t\t\t\t// step type\n\ttm: number;\t\t\t\t\t\t\t\t\t// timestamp\n\td: string;\t\t\t\t\t\t\t\t\t// hex string of the incoming data\n\to: number;\t\t\t\t\t\t\t\t\t// offset, 0 usually\n\n\t// getSize(): number;\n}\n\n// export class CTraceStepNewData implements TTraceStepNewData {\n// \tgetSize = () => {\n// \t\treturn 0;\n// \t}\n// }\n\nexport const getDataSize = (step: TTraceStepNewData) => step.d.length / 2;\n\nexport interface TTraceStepOffset extends TTraceStepBase {\n\tt: TTraceStepType.Offset;\t\t\t\t\t// step type\n\to: number;\t\t\t\t\t\t\t\t\t// offset\n\tl: number;\t\t\t\t\t\t\t\t\t// last (previous) offset\n}\n\nexport interface TTraceStepError extends TTraceStepBase {\n\tt: TTraceStepType.Error;\t\t\t\t\t\t// step type\n\to: number;\t\t\t\t\t\t\t\t\t// offset\n\tm: string;\t\t\t\t\t\t\t\t\t// error message\n}\n\nexport type TTraceStep = TTraceStepLine | TTraceStepNewData | TTraceStepOffset | TTraceStepError;\n\nexport type TCodeFileId = [number, string];\t\t// file id, file name\n\nexport type TVariableId = [number, string];\t\t// variable id, variable name\n\nexport interface TSourceCode {\n\tmain: string;\n\t[key: string]: string;\n}\n\nexport interface TSourceCodeLines {\n\t[key: string]: string[];\n}\n\nexport interface TTraceDump {\n\tbytecode_name: string;\n\tfiles: TCodeFileId[];\n\tvariables: TVariableId[];\n\ttrace: TTraceStep[];\n\tsource?: TSourceCode;\n\tsourceLines?: TSourceCodeLines;\n}\n","import { TTraceDump } from '../types';\n\nexport const scrollTo = (ref: any) => {\n\tif (ref)\n\t\tref.scrollIntoView({ behavior: 'auto', block: 'center', inline: 'center' });\n};\n\nconst fileIndexToSourceName = (traceDump: TTraceDump, file: number): string | null => {\n\tconst fileId = traceDump.files.find((fId) => fId[0] === file);\n\tif (!fileId)\n\t\treturn null;\n\tconst fileName = fileId[1];\n\tif (fileName === traceDump.bytecode_name)\n\t\treturn 'main';\n\treturn fileName;\n};\n\nexport const getSourceCodeLine = (traceDump: TTraceDump, file: number, lineNum: number) => {\n\tif (!traceDump.sourceLines)\n\t\treturn '?';\n\tconst sourceName = fileIndexToSourceName(traceDump, file);\n\tif (!sourceName)\n\t\treturn '?';\n\tconst lines = traceDump.sourceLines[sourceName];\n\tconst line = lines[lineNum - 1];\n\treturn line.trim();\n};\n\nexport const renderDecodedHex = (hex: string) => {\n\tconst bytes: number[] = [];\n\n\tlet i = 0;\n\twhile (i < hex.length) {\n\t\tconst hexByte = hex.slice(i, i + 2);\n\t\tbytes.push(Number.parseInt(hexByte, 16));\n\t\ti += 2;\n\t}\n\n\tconst chars = bytes.map((byte) => {\n\t\tif (byte === 9) {\n\t\t\treturn <span className='special-data-char'>\\t</span>;\n\t\t} else if (byte === 10) {\n\t\t\treturn <span className='special-data-char'>\\n</span>;\n\t\t} else if (byte === 13) {\n\t\t\treturn <span className='special-data-char'>\\r</span>;\n\t\t} else if (byte < 0x20) {\n\t\t\tlet char = byte.toString(16).toUpperCase();\n\t\t\tif (char.length < 2)\n\t\t\t\tchar = `0${char}`;\n\t\t\treturn <span className='special-data-char'>\\x{char}</span>;\n\t\t} else {\n\t\t\treturn String.fromCharCode(byte);\n\t\t}\n\t});\n\treturn chars;\n};\n","import React from 'react';\nimport { scrollTo } from '../../lib/common';\nimport { TTraceDump } from '../../types';\nimport './style.css';\n\ninterface SourceCodeViewProps {\n\ttraceDump: TTraceDump;\n\tstepIndex: number;\n}\n\nconst SourceCodeView: React.FC<SourceCodeViewProps> = (props) => {\n\tconst { traceDump, stepIndex } = props;\n\tconst step = traceDump.trace[stepIndex];\n\tconst fileLines = traceDump.sourceLines?.main; // NOTE: hardcoded \"main\" source code file\n\n\tif (!fileLines)\n\t\treturn <div>no source code available</div>;\n\n\tconst lines = fileLines.map((line, index) => {\n\t\tlet viewLine;\n\t\tif (line === '')\n\t\t\tviewLine = <br />;\n\t\telse\n\t\t\tviewLine = line;\n\n\t\treturn <pre\n\t\t\tkey={index}\n\t\t\tref={index === (step.c[1] - 1) ? scrollTo : undefined}\n\t\t\tclassName={index === (step.c[1] - 1) ? 'source-code-line source-code-line-selected': 'source-code-line'}>{viewLine}</pre>;\n\t});\n\n\treturn <div className=\"source-code-lines\">\n\t\t{lines}\n\t</div>;\n};\n\nexport default SourceCodeView;\n","import React from 'react';\n\ninterface TimeStringProps {\n\t/** unix timestamp */\n\tvalue: number;\n}\n\nconst TimeString: React.FC<TimeStringProps> = (props) => {\n\tconst { value } = props;\n\tconst d = new Date(value * 1000);\n\tconst time = d.toLocaleString('en-GB', {\n\t\thour: 'numeric',\n\t\tminute: 'numeric',\n\t\tsecond: 'numeric',\n\t});\n\tconst ms = Number(value).toFixed(6).split('.')[1];\n\treturn <span>{time}.{ms}</span>;\n};\n\nexport default TimeString;\n","import React from 'react';\nimport { getDataSize, TTraceDump, TTraceStep, TTraceStepNewData, TTraceStepType, TVariableAction } from '../../types';\nimport TimeString from '../TimeString';\nimport { getSourceCodeLine, renderDecodedHex, scrollTo } from '../../lib/common';\nimport './style.css';\n\ninterface TraceStepProps {\n\ttraceDump: TTraceDump;\n\tstepIndex: number;\n\tindex: number;\n\tpacketStep?: TTraceStepNewData;\n\tsetStepIndex: (index: number) => void;\n\tstep: TTraceStep;\n\tdecodeHex: boolean;\n}\n\nconst TraceStep: React.FC<TraceStepProps> = (props) => {\n\tconst { traceDump, stepIndex, index, packetStep, setStepIndex, step, decodeHex } = props;\n\tconst { variables } = traceDump;\n\n\tconst getVarName = (index: number) => {\n\t\tconst v = variables.find((varId) => varId[0] === index);\n\t\treturn v ? v[1] : '?';\n\t};\n\n\tconst listVars = (vars: TVariableAction[]) => {\n\t\treturn vars.map((v, index) => {\n\t\t\tif (typeof v === 'number')\n\t\t\t\treturn <span key={index} className=\"trace-var\">UNSET ${getVarName(v)}</span>;\n\t\t\telse\n\t\t\t\treturn <span key={index} className=\"trace-var\">${getVarName(v[0])} = {v[2]}</span>;\n\t\t});\n\t};\n\n\tconst stepClick = (index: number) => {\n\t\tsetStepIndex(index);\n\t};\n\n\tlet body;\n\n\tswitch (step.t) {\n\tcase TTraceStepType.Line:\n\t\tbody = <div>\n\t\t\t<div>\n\t\t\t\t{listVars(step.v)}\n\t\t\t</div>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\tcase TTraceStepType.NewData: {\n\t\tconst size = getDataSize(step);\n\t\tbody = <div>\n\t\t\t<div className=\"trace-step-data\">\n\t\t\t\t<span className=\"trace-step-data-column trace-step-data-column-value\">\n\t\t\t\t\t{decodeHex ? renderDecodedHex(step.d) : step.d}\n\t\t\t\t</span>\n\t\t\t\t<span className=\"trace-step-data-column\">\n\t\t\t\t\t<small>{size} bytes,&nbsp;<TimeString value={step.tm} /></small>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\t}\n\tcase TTraceStepType.Offset:\n\t\tbody = <div>\n\t\t\t<div className=\"trace-step-data\">\n\t\t\t\t<span className=\"trace-step-data-column trace-step-data-column-value\">\n\t\t\t\t\t{packetStep && <>&nbsp;&nbsp;{\n\t\t\t\t\t\tdecodeHex ? renderDecodedHex(packetStep.d.slice(step.l * 2, step.o * 2)) : packetStep.d.slice(step.l * 2, step.o * 2)\n\t\t\t\t\t}</>}\n\t\t\t\t</span>\n\t\t\t\t<span className=\"trace-step-data-column\">\n\t\t\t\t\t<small>{step.o - step.l} bytes: {step.l}...{step.o}</small>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\tcase TTraceStepType.Error:\n\t\tbody = <div>\n\t\t\tError:\n\t\t\t<pre className=\"trace-step-error\">{step.m}</pre>\n\t\t\t<div className=\"trace-step-source-line\">\n\t\t\t\t{getSourceCodeLine(traceDump, step.c[0], step.c[1])}\n\t\t\t</div>\n\t\t</div>;\n\t\tbreak;\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tkey={index}\n\t\t\tref={index === stepIndex ? scrollTo : undefined}\n\t\t\tclassName={index === stepIndex ? 'trace-step trace-step-selected' : 'trace-step'}\n\t\t\tonClick={() => stepClick(index)}>\n\t\t\t{body}\n\t\t</div>\n\t);\n};\n\nexport default TraceStep;\n","import React from 'react';\nimport { TTraceDump, TTraceStep, TTraceStepNewData, TTraceStepType } from '../../types';\nimport TraceStep from '../TraceStep';\nimport './style.css';\n\ninterface TraceDumpStepsProps {\n\ttraceDump: TTraceDump;\n\tstepIndex: number;\n\tsetStepIndex: (index: number) => void;\n\tshowAllSteps: boolean;\n\tdecodeHex: boolean;\n}\n\nconst TraceDumpSteps: React.FC<TraceDumpStepsProps> = (props) => {\n\tconst { trace } = props.traceDump;\n\tconst { stepIndex, setStepIndex, showAllSteps, decodeHex } = props;\n\n\tconst step = trace[stepIndex] as TTraceStep;\n\tconsole.log('step', step);\n\n\tlet packetStep: TTraceStepNewData;\n\n\tconst steps: React.ReactElement[] = [];\n\ttrace.forEach((step, index) => {\n\t\tif (step.t === TTraceStepType.NewData)\n\t\t\tpacketStep = step;\n\t\tif (showAllSteps || (step.t !== TTraceStepType.Line))\n\t\t\tsteps.push(<TraceStep key={index} traceDump={props.traceDump} stepIndex={stepIndex} index={index} packetStep={packetStep} setStepIndex={setStepIndex} step={step} decodeHex={decodeHex} />);\n\t});\n\n\treturn (\n\t\t<div className=\"trace-dump-steps\">\n\t\t\t{steps}\n\t\t</div>\n\t);\n};\n\nexport default TraceDumpSteps;\n","import React from 'react';\nimport { TTraceStepNewData, TTraceStepOffset } from '../../types';\nimport { renderDecodedHex, scrollTo } from '../../lib/common';\nimport './style.css';\n\ninterface TracePacketPartProps {\n\tpacket: TTraceStepNewData;\n\tstep: TTraceStepOffset;\n\tindex: number;\n\tstepIndex: number;\n\tsetStepIndex: (index: number) => void;\n\tdecodeHex: boolean;\n}\n\nconst TracePacketPart: React.FC<TracePacketPartProps> = (props) => {\n\tconst { packet, step, index, stepIndex, setStepIndex, decodeHex } = props;\n\n\tconst showStep = (index: number) => {\n\t\tsetStepIndex(index);\n\t};\n\tconst hex = packet.d.slice(step.l * 2, step.o * 2);\n\n\treturn (\n\t\t<span\n\t\t\tref={index === stepIndex ? scrollTo : undefined}\n\t\t\tclassName={index === stepIndex ? 'trace-packet-part trace-packet-part-selected' : 'trace-packet-part'}\n\t\t\tonClick={() => showStep(index)}>\n\t\t\t{decodeHex ? renderDecodedHex(hex) : hex}\n\t\t</span>\n\t);\n};\n\nexport default TracePacketPart;\n","import { findIndex, findLastIndex } from 'lodash';\nimport React from 'react';\nimport { getDataSize, TTraceDump, TTraceStep, TTraceStepNewData, TTraceStepType } from '../../types';\nimport TimeString from '../TimeString';\nimport TracePacketPart from '../TracePacketPart';\nimport './style.css';\n\ninterface TracePacketProps {\n\ttraceDump: TTraceDump;\n\tpacketIndex: number;\n\tsetPacketIndex: (index: number) => void;\n\tstepIndex: number;\n\tsetStepIndex: (index: number) => void;\n\tdecodeHex: boolean;\n}\n\nconst prevPacketIndex = (trace: TTraceStep[], fromIndex: number) => findLastIndex(trace, (step) => step.t === TTraceStepType.NewData, fromIndex - 1);\n\nconst nextPacketIndex = (trace: TTraceStep[], fromIndex: number) => findIndex(trace, (step) => step.t === TTraceStepType.NewData, fromIndex + 1);\n\nconst TracePacket: React.FC<TracePacketProps> = (props) => {\n\tconst { trace } = props.traceDump;\n\tconst { packetIndex, setPacketIndex, stepIndex, setStepIndex, decodeHex } = props;\n\n\tconst packet = trace[packetIndex] as TTraceStepNewData;\n\n\tif (!packet) {\n\t\t// searching first available packet\n\t\tconst first = nextPacketIndex(trace, -1);\n\t\tif (first === -1) {\n\t\t\treturn <div>No data packets available in the trace file</div>;\n\t\t}\n\n\t\tsetTimeout(() => setPacketIndex(first));\n\t\treturn null;\n\t}\n\n\tconst goPrevPacket = () => {\n\t\tlet prev = prevPacketIndex(trace, packetIndex);\n\t\tif (prev === -1)\n\t\t\tprev = prevPacketIndex(trace, trace.length);\n\t\tsetPacketIndex(prev);\n\t};\n\n\tconst goNextPacket = () => {\n\t\tlet next = nextPacketIndex(trace, packetIndex);\n\t\tif (next === -1)\n\t\t\tnext = nextPacketIndex(trace, -1);\n\t\tsetPacketIndex(next);\n\t};\n\n\tconst packetParts: React.ReactElement[] = [];\n\t// collect packet parts from the trace steps until the next packet occurs\n\tlet i = packetIndex + 1;\n\tlet step = trace[i];\n\twhile (step && step.t !== TTraceStepType.NewData) {\n\t\tif (step.t === TTraceStepType.Offset)\n\t\t\tpacketParts.push(<TracePacketPart key={i} packet={packet} step={step} index={i} stepIndex={stepIndex} setStepIndex={setStepIndex} decodeHex={decodeHex} />);\n\t\ti += 1;\n\t\tstep = trace[i];\n\t}\n\n\treturn (\n\t\t<div className=\"trace-packet\">\n\t\t\t<div className=\"trace-packet-info\">\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<button onClick={goPrevPacket}>&lt;</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<button onClick={goNextPacket}>&gt;</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex trace-packet-pad\">\n\t\t\t\t\tTime:&nbsp;<TimeString value={packet.tm} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex trace-packet-pad\">\n\t\t\t\t\tSize: {getDataSize(packet)} B\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"flex trace-packet-hex\">\n\t\t\t\t{packetParts}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TracePacket;\n","import _ from 'lodash';\nimport React, { ChangeEvent, useState } from 'react';\nimport { Parser } from 'json2csv';\nimport { getSourceCodeLine } from '../../lib/common';\nimport { getDataSize, TTraceDump, TTraceFile, TTraceStepNewData, TTraceStepType } from '../../types';\nimport SourceCodeView from '../SourceCodeView';\nimport TraceDumpSteps from '../TraceDumpSteps';\nimport TracePacket from '../TracePacket';\nimport './style.css';\n\ninterface TraceDumpViewerProps {\n\ttraceFile: TTraceFile;\n\ttraceDump: TTraceDump;\n}\n\nconst TraceDumpViewer: React.FC<TraceDumpViewerProps> = (props) => {\n\tconst { traceFile, traceDump } = props;\n\tconst [packetIndex, setPacketIndex] = useState(-1);\n\tconst [stepIndex, setStepIndex] = useState(0);\n\tconst [showAllSteps, setShowAllSteps] = useState(false);\n\tconst [decodeHex, setDecodeHex] = useState(false);\n\n\tconst setPacket = (index: number) => {\n\t\tsetPacketIndex(index);\n\t\tsetStepIndex(index);\n\t};\n\n\tconst setStep = (index: number) => {\n\t\tif (index < 0)\n\t\t\tindex = traceDump.trace.length - 1;\n\t\telse if (index >= traceDump.trace.length)\n\t\t\tindex = 0;\n\t\tsetStepIndex(index);\n\t\t// find a packet index to the left of the selected step index\n\t\tconst packetIndex = _.findLastIndex(traceDump.trace, (step) => step.t === TTraceStepType.NewData, index);\n\t\tif (packetIndex !== -1)\n\t\t\tsetPacketIndex(packetIndex);\n\t};\n\n\tconst showAllStepsChanged = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetShowAllSteps(e.target.checked);\n\t};\n\n\tconst decodeHexChanged = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetDecodeHex(e.target.checked);\n\t};\n\n\tconst prevStep = (index: number) => {\n\t\tif (showAllSteps)\n\t\t\treturn index - 1;\n\t\telse {\n\t\t\tlet prev = _.findLastIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, index - 1);\n\t\t\tif (prev === -1)\n\t\t\t\tprev = _.findLastIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, traceDump.trace.length - 1);\n\t\t\treturn prev;\n\t\t}\n\t};\n\n\tconst nextStep = (index: number) => {\n\t\tif (showAllSteps)\n\t\t\treturn index + 1;\n\t\telse {\n\t\t\tlet next = _.findIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, index + 1);\n\t\t\tif (next === -1)\n\t\t\t\tnext = _.findIndex(traceDump.trace, (step) => step.t !== TTraceStepType.Line, 0);\n\t\t\treturn next;\n\t\t}\n\t};\n\n\tconst saveTextFile = (text: string, suffix: string) => {\n\t\tconst a = document.createElement('a');\n\t\ta.download = traceFile.name + suffix;\n\t\ta.href = URL.createObjectURL(new Blob([text], {type: 'text/plain'}));\n\t\ta.click();\n\t};\n\n\tconst doExportCSV = () => {\n\t\tconst csv = [\n\t\t\t['type', 'size', 'hex', 'code'],\n\t\t];\n\t\tlet packet: TTraceStepNewData;\n\t\ttraceDump.trace.forEach((step) => {\n\t\t\tif (step.t === TTraceStepType.Line)\n\t\t\t\treturn;\n\n\t\t\t// type\n\t\t\tconst row: Array<string> = [step.t];\n\n\t\t\t// size, hex\n\t\t\tif (step.t === TTraceStepType.NewData) {\n\t\t\t\tpacket = step;\n\t\t\t\trow.push(getDataSize(step).toString());\n\t\t\t\trow.push(step.d);\n\t\t\t} else if (step.t === TTraceStepType.Offset) {\n\t\t\t\tconst hex = packet.d.slice(step.l * 2, step.o * 2);\n\t\t\t\trow.push((step.o - step.l).toString());\n\t\t\t\trow.push(hex);\n\t\t\t} else if (step.t === TTraceStepType.Error) {\n\t\t\t\t// size='', hex=<error>\n\t\t\t\trow.push('');\n\t\t\t\trow.push(step.m);\n\t\t\t}\n\n\t\t\t// code\n\t\t\trow.push(getSourceCodeLine(traceDump, step.c[0], step.c[1]));\n\n\t\t\tcsv.push(row);\n\t\t});\n\n\t\t// convert to CSV text\n\t\tconst csvText = new Parser({ header: false, eol: '\\n', delimiter: ';' }).parse(csv);\n\n\t\t// and save file in the browser\n\t\tsaveTextFile(csvText, '.export.csv');\n\t};\n\n\tconst doExportTXT = () => {\n\t\tconst lines = [];\n\n\t\tlet packet: TTraceStepNewData | null = null;\n\t\tlet maxSize = 0;\n\t\tfor (let i = 0; i < traceDump.trace.length; i++) {\n\t\t\tconst step = traceDump.trace[i];\n\t\t\tif (step.t === TTraceStepType.NewData) {\n\t\t\t\tpacket = step;\n\t\t\t\tmaxSize = 0;\n\n\t\t\t\tif (lines.length > 0)\n\t\t\t\t\tlines.push('');\n\t\t\t\tlines.push(`New packet of ${getDataSize(step)} bytes:`);\n\t\t\t\tlines.push(`\\t${step.d}`);\n\t\t\t\tlines.push('');\n\n\t\t\t\tfor (let j = i + 1; j < traceDump.trace.length; j++) {\n\t\t\t\t\tconst jstep = traceDump.trace[j];\n\t\t\t\t\tif (jstep.t === TTraceStepType.Offset) {\n\t\t\t\t\t\tconst size = (jstep.o - jstep.l) * 2;\n\t\t\t\t\t\tif (size > maxSize)\n\t\t\t\t\t\t\tmaxSize = size;\n\t\t\t\t\t} else if (jstep.t === TTraceStepType.NewData)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (step.t === TTraceStepType.Offset) {\n\t\t\t\tif (packet) {\n\t\t\t\t\tconst hex = packet.d.slice(step.l * 2, step.o * 2);\n\t\t\t\t\tconst spaces = maxSize - hex.length;\n\t\t\t\t\tlines.push(`${hex}${' '.repeat(spaces)}\\t\\t${getSourceCodeLine(traceDump, step.c[0], step.c[1])}`);\n\t\t\t\t}\n\t\t\t} else if (step.t === TTraceStepType.Error) {\n\t\t\t\tlines.push('');\n\t\t\t\tlines.push(step.m);\n\t\t\t}\n\t\t}\n\n\t\tsaveTextFile(lines.join('\\n'), '.export.txt');\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"trace-file-info\">\n\t\t\t\tLoaded trace dump file <strong>{traceFile.name}</strong> of size <strong>{Number(traceFile.size / 1024).toFixed(2)}</strong> KiB\n\t\t\t</div>\n\t\t\t<TracePacket traceDump={traceDump} packetIndex={packetIndex} setPacketIndex={setPacket} stepIndex={stepIndex} setStepIndex={setStep} decodeHex={decodeHex} />\n\t\t\t<div className=\"trace-view-settings\">\n\t\t\t\t<button onClick={() => setStep(prevStep(stepIndex))}>&lt;</button>\n\t\t\t\t<button onClick={() => setStep(nextStep(stepIndex))}>&gt;</button>\n\t\t\t\t&nbsp;\n\t\t\t\t<label><input type=\"checkbox\" onChange={showAllStepsChanged} /> show all steps</label>\n\t\t\t\t&nbsp;|&nbsp;\n\t\t\t\t<label><input type=\"checkbox\" onChange={decodeHexChanged} /> decode hex</label>\n\t\t\t\t&nbsp;\n\t\t\t\t<button onClick={doExportCSV}>Export to CSV</button>\n\t\t\t\t&nbsp;\n\t\t\t\t<button onClick={doExportTXT}>Export to TXT</button>\n\t\t\t</div>\n\t\t\t<div className=\"trace-dump-details\">\n\t\t\t\t<TraceDumpSteps traceDump={traceDump} stepIndex={stepIndex} setStepIndex={setStep} showAllSteps={showAllSteps} decodeHex={decodeHex} />\n\t\t\t\t<SourceCodeView traceDump={traceDump} stepIndex={stepIndex} />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default TraceDumpViewer;\n","import React, { ChangeEvent } from 'react';\nimport { TTraceDump, TTraceFile } from '../../types';\nimport './style.css';\n\ninterface TraceDumpSelectorProps {\n\tsetTraceFile: (file: TTraceFile) => void;\n\tsetTraceDump: (dump: TTraceDump) => void;\n}\n\nconst TraceDumpSelector: React.FC<TraceDumpSelectorProps> = (props) => {\n\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tif (e.target.files) {\n\t\t\tconst fileReader = new FileReader();\n\t\t\tconst file = e.target.files[0];\n\t\t\tfileReader.readAsText(file, 'UTF-8');\n\t\t\tprops.setTraceFile({ name: file.name, size: file.size });\n\t\t\tfileReader.onload = (e) => {\n\t\t\t\tif (e.target?.result) {\n\t\t\t\t\tconst fileJson = e.target.result.toString();\n\t\t\t\t\tconst traceDump: TTraceDump = JSON.parse(fileJson);\n\t\t\t\t\tif (traceDump.source) {\n\t\t\t\t\t\ttraceDump.sourceLines = {};\n\t\t\t\t\t\tfor (let key of Object.keys(traceDump.source)) {\n\t\t\t\t\t\t\tconst lines = traceDump.source[key].split('\\n');\n\t\t\t\t\t\t\ttraceDump.sourceLines[key] = lines;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprops.setTraceDump(traceDump);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\treturn (\n\t\t<header className=\"trace-dump-header\">\n\t\t\tLoad trace dump:\n\t\t\t<input type=\"file\" onChange={handleChange}/>\n\t\t</header>\n\t);\n};\n\nexport default TraceDumpSelector;\n","import { useState } from 'react';\nimport { TTraceDump, TTraceFile } from './types';\nimport TraceDumpViewer from './components/TraceDumpViewer';\nimport TraceDumpSelector from './components/TraceDumpSelector';\nimport './App.css';\n\nfunction App() {\n\tconst [traceFile, setTraceFile] = useState<TTraceFile>();\n\tconst [traceDump, setTraceDump] = useState<TTraceDump>();\n\n\tconsole.log('traceFile, traceDump', traceFile, traceDump);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{ (traceDump && traceFile) ? (\n\t\t\t\t<TraceDumpViewer traceFile={traceFile} traceDump={traceDump} />\n\t\t\t) : (\n\t\t\t\t<TraceDumpSelector setTraceFile={setTraceFile} setTraceDump={setTraceDump} />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}